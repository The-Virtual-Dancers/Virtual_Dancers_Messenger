{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","isMyTodo","todo","localStorage","getItem","split","includes","id","Modal","onClose","e","className","placeholder","value","onChange","event","target","Button","onClick","collection","doc","set","merge","List","ListItem","ListItemText","primary","secondary","variant","delete","mytodos","splice","indexOf","setItem","deleteTodo","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","then","newTodo","oldTodos","color","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.195a30df.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyAk55_K2PkHtm9dc57ZPDqJPXtBmKTR6Wc\",\n    authDomain: \"todo-app-d0a0d.firebaseapp.com\",\n    databaseURL: \"https://todo-app-d0a0d.firebaseio.com\",\n    projectId: \"todo-app-d0a0d\",\n    storageBucket: \"todo-app-d0a0d.appspot.com\",\n    messagingSenderId: \"899210179996\",\n    appId: \"1:899210179996:web:ff94c6b7fad981b6368459\",\n    measurementId: \"G-GWNCV6K2HY\"\n});\n\nconst db = firebaseApp.firestore();\nexport default db;","import { ListItemText } from '@material-ui/core'\nimport React ,{useState}from 'react'\nimport './Todo.css'\nimport {ListItem, List, Modal, Button} from '@material-ui/core'\nimport db from './firebase'\nimport {makeStyles} from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme)=> ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2,4,3)\n    }\n}))\n\nfunction Todo(props) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [input, setInput] = useState();\n\n    const updateTodo = () => {\n        db.collection('todos').doc(props.todo.id).set({\n            todo: input\n        }, {merge:true});\n\n        setOpen(false);\n\n    }\n\n    // check User (Browser)\n   function isMyTodo(todo){\n       if(localStorage.getItem('mytodos')){\n           let mytodos = localStorage.getItem('mytodos').split(',')\n           if(mytodos.includes(todo.id)) return true\n           else return false\n       } else {\n           return false\n       }\n   }\n\n   // Delete todo\n   function deleteTodo(id) {\n       db.collection('todos').doc(id).delete()\n       let mytodos = localStorage.getItem('mytodos').split(',')\n       mytodos.splice(mytodos.indexOf(id), 1)\n       localStorage.setItem('mytodos', mytodos)\n   }\n\n    return (\n        <>\n        <Modal open = {open} onClose={e =>  setOpen(false)}>\n            <div className={classes.paper}>\n                <h1>Edit Your Message</h1>\n                <input placeholder={props.todo.todo} value={input} onChange={event => setInput(event.target.value)}></input>\n                <Button onClick={updateTodo}>Update Message</Button>\n            </div>\n        </Modal>\n        <List className=\"todo__list\">\n            <ListItem>\n                <ListItemText primary={props.todo.todo} secondary=\"Virtual Dancers üëØ‚Äç‚ôÇÔ∏èüï∫üíÉ\" className=\"todo__list__item\"/>\n                { isMyTodo(db.collection('todos').doc(props.todo.id)) && <Button variant=\"contained\" onClick={e => setOpen(true)} className=\"todo__list__button\">Edit</Button> }\n                { isMyTodo(db.collection('todos').doc(props.todo.id)) && <Button variant=\"contained\" onClick={()=>deleteTodo(props.todo.id)}>‚ùå</Button>}\n            </ListItem>\n            \n        </List>\n        </>\n    )\n}\n\nexport default Todo\n","import React, {useState, useEffect} from 'react';\nimport {Button, FormControl, InputLabel, Input} from '@material-ui/core'\nimport './App.css';\nimport Todo from './Todo'\nimport db from './firebase'\nimport firebase from 'firebase';\n\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id, todo: doc.data().todo})))\n    })\n  }, [])\n\n  //This will fire off when we click the button\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then((newTodo)=>{\n\n      // Add to localStorage \n      if(localStorage.getItem('mytodos')){\n        let oldTodos = localStorage.getItem('mytodos')\n        localStorage.setItem('mytodos',`${oldTodos},${newTodo.id}`)\n      }\n      else{\n        localStorage.setItem('mytodos',newTodo.id)\n      }\n\n    })\n    setInput('')\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Virtual Dancers üëØ‚Äç‚ôÇÔ∏èüï∫üíÉ Secret Messenger</h1>\n      <form>\n      <FormControl>\n        <InputLabel>‚úÖ Write a Message</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n      </FormControl>\n\n      <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\" className=\"add_message_btn\">Add Message</Button>\n      </form>\n\n      <ul>\n        {todos.map((todo, index) => (\n          <Todo key={index} todo={todo}/>\n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}